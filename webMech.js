// Generated by CoffeeScript 1.6.3
var createLine, createPoint, drawLine, drawPoint, elements, getAngle, getDistance,
  _this = this;

elements = {};

createPoint = function(pos, name, fathers, parameters) {
  var father, _fn, _i, _len,
    _this = this;
  if ((elements[name] != null)) {
    alert("duplicated");
    return -1;
  }
  elements[name] = {
    "type": "point",
    "name": name,
    "x": pos[0],
    "y": pos[1],
    "fathers": fathers,
    "children": [],
    "parameters": parameters
  };
  _fn = function(father) {
    if (elements[father] != null) {
      return elements[father]["children"].push(name);
    } else {
      return alert("cannot find element:" + father);
    }
  };
  for (_i = 0, _len = fathers.length; _i < _len; _i++) {
    father = fathers[_i];
    _fn(father);
  }
  return drawPoint(name);
};

drawPoint = function(name) {
  var child, generateStr, obj, pt, _i, _len, _ref, _results,
    _this = this;
  obj = elements[name];
  pt = null;
  if ($("#" + name).length === 0) {
    generateStr = "<svg id=\"" + obj.name + "\" class=\"svgPoint\" >\n<rect x=\"0\" y=\"0\" width=\"1\" height=\"1\" class=\"rectPoint\" />\n</svg>";
    pt = $(generateStr).appendTo($("body")[0]);
  } else {
    pt = $("#" + name);
  }
  pt.css("left", obj["x"]());
  pt.css("top", obj["y"]());
  _ref = obj["children"];
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    child = _ref[_i];
    _results.push((function(child) {
      if (elements[child]["type"] === "point") {
        return drawPoint(child);
      } else if (elements[child]['type'] === "line") {
        return drawLine(child);
      }
    })(child));
  }
  return _results;
};

createLine = function(start, end, name, parameters) {
  var father, _fn, _i, _len, _ref,
    _this = this;
  if (parameters == null) {
    parameters = {};
  }
  if ((elements[name] != null)) {
    alert("line name duplicated");
    return -1;
  }
  elements[name] = {
    "type": "line",
    "name": name,
    "start": start,
    "end": end,
    "fathers": [start, end],
    "parameters": parameters
  };
  _ref = elements[name]["fathers"];
  _fn = function(father) {
    if (elements[father] != null) {
      return elements[father]["children"].push(name);
    } else {
      return alert("cannot find element:" + father);
    }
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    father = _ref[_i];
    _fn(father);
  }
  return drawLine(name);
};

drawLine = function(name) {
  var ed, generateStr, line, obj, st;
  obj = elements[name];
  line = null;
  st = elements[obj["start"]];
  ed = elements[obj["end"]];
  if ($("#" + name).length === 0) {
    generateStr = "<svg id=\"" + obj.name + "\" class=\"svgLine\" >\n<line x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\" class =\"line\" />\n</svg>";
    line = $(generateStr).appendTo($("body")[0]);
  } else {
    line = $("#" + name);
  }
  line.css("left", st['x']());
  line.css("top", st['y']());
  line.css("width", getDistance(obj['start'], obj['end']));
  return line.css("-webkit-transform", "rotate(" + (getAngle(obj['start'], obj['end'])) + "deg)");
};

getDistance = function(from, to) {
  var fr, t;
  fr = elements[from];
  t = elements[to];
  return Math.sqrt((Math.pow(fr.x() - t.x(), 2)) + (Math.pow(fr.y() - t.y(), 2)));
};

getAngle = function(from, to) {
  var fr, t, temp;
  fr = elements[from];
  t = elements[to];
  temp = Math.atan((t.y() - fr.y()) / (t.x() - fr.x()));
  if (t.x() - fr.x() >= 0) {
    return temp / 3.1415926 * 180;
  } else {
    return temp / 3.1415926 * 180 + 180;
  }
};

$(function() {
  createPoint([
    (function() {
      return this["parameters"]["x"];
    }), (function() {
      return this["parameters"]["y"];
    })
  ], "p1", [], {
    "x": 200,
    "y": 300
  });
  createPoint([
    (function() {
      return this["parameters"]["x"];
    }), (function() {
      return this["parameters"]["y"];
    })
  ], "p4", [], {
    "x": 500,
    "y": 300
  });
  createPoint([
    (function() {
      return elements[this['parameters']['center']]["x"]() + this['parameters']['r'] * Math.cos(this['parameters']['theta'] / 180 * 3.14159);
    }), (function() {
      return elements[this['parameters']['center']]["y"]() + this['parameters']['r'] * Math.sin(this['parameters']['theta'] / 180 * 3.14159);
    })
  ], "p2", ['p1'], {
    "center": "p1",
    "r": 50,
    "theta": 45
  });
  createPoint([
    (function() {
      var d, gamma, phi, r1, r2, theta, xa, xb, ya, yb;
      r1 = this["parameters"]["r1"];
      r2 = this['parameters']['r2'];
      xa = elements['p2']['x']();
      ya = elements['p2']['y']();
      xb = elements['p4']['x']();
      yb = elements['p4']['y']();
      d = Math.sqrt((xb - xa) * (xb - xa) + (yb - ya) * (yb - ya));
      gamma = Math.acos((d * d + r1 * r1 - r2 * r2) / (2 * d * r1));
      theta = Math.atan((yb - ya) / (xb - xa));
      phi = gamma - theta;
      return xa + r1 * Math.cos(phi);
    }), (function() {
      var d, gamma, phi, r1, r2, theta, xa, xb, ya, yb;
      r1 = this["parameters"]["r1"];
      r2 = this['parameters']['r2'];
      xa = elements['p2']['x']();
      ya = elements['p2']['y']();
      xb = elements['p4']['x']();
      yb = elements['p4']['y']();
      d = Math.sqrt((xb - xa) * (xb - xa) + (yb - ya) * (yb - ya));
      gamma = Math.acos((d * d + r1 * r1 - r2 * r2) / (2 * d * r1));
      theta = Math.atan((yb - ya) / (xb - xa));
      phi = gamma - theta;
      log.innerHTML = gamma / 3.14159 * 180 + " " + theta / 3.14159 * 180 + " " + d + '<br\/>' + (yb - ya) + " " + (xb - xa);
      return ya - r1 * Math.sin(phi);
    })
  ], "p3", ['p2', 'p4'], {
    'r1': 200,
    'r2': 200
  });
  createLine("p1", "p2", "line1", {});
  createLine("p2", "p3", "line2", {});
  createLine("p4", "p3", "line3", {});
  createLine("p4", "p2", "line4", {});
  return $("body").bind("mousemove", function(e) {
    elements["p2"]['parameters']['theta'] = 2 * parseFloat(e.clientY);
    return drawPoint("p1");
  });
});

/*
//@ sourceMappingURL=webMech.map
*/
